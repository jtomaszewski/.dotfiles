[alias]
  # Shorthand for `add`
  a = add

  # Shorthand for `add --all`
  aa = add --all

  # Stage all changes and create a commit with a single command
  ac = "!f(){ git add --all && git commit -a -m $1 ${@:2} ; }; f"

  # Stage all changes and create a commit with the same message as the previous commit
  acc = !git add . && git commit -a --reuse-message=HEAD

  # Define new git alias
  alias = "!sh -c '[ $# = 2 ] && git config --global alias.\"$1\" \"$2\" && exit 0 || echo \"usage: git alias <new alias> <original command>\" >&2 && exit 1' -"

  # List all defined aliases
  aliases = !git config --get-regexp 'alias.*' | colrm 1 6 | sed 's/[ ]/ = /'

  # List all authors who have contributed to the repository, sorted by the number of commits they have made
  authors = "!git log --format='%aN <%aE>' | awk '{arr[$0]++} END{for (i in arr){print arr[i], i;}}' | sort -rn | cut -d' ' -f2-"

  # Shorthand for `branch`
  b = branch

  # List branches with their last commit date, sorted by the last commit date ascending (most recent first)
  bls = "!f() { \
    count=${1:-20}; \
    git for-each-ref --sort=committerdate refs/heads --format='%(refname:short)|%(HEAD)%(color:yellow)%(refname:short)|%(color:bold green)%(committerdate:relative)|%(color:blue)%(subject)|%(color:magenta)%(authorname)%(color:reset)' --color=always | tail -n $count \
    | while read line; do \
      branch=$(echo \"$line\" | awk 'BEGIN { FS = \"|\" }; { print $1 }' | tr -d '*'); \
      colorline=$(echo \"$line\" | sed 's/^[^|]*|//'); \
      echo \"$colorline\" | awk -F'|' -vOFS='|' '{$5=substr($5,1,70)}1' ; \
    done | ( echo \"branch|lastcommit|message|author\\n\" && cat) | column -ts'|' ; }; \
  f"

  # View the name of the current branch
  branchname = !git branch | awk '/^\\* / { print $2 }'

  # Set the upstream branch for the current branch to the origin
  bsh = "!f(){ git branch --set-upstream-to=origin/$(git branchname) $(git branchname) $@;}; f"

  # Shorthand for `commit`
  c = commit

  # Amend the most recent commit and keep its' message
  ca = commit --amend --reuse-message=HEAD

  # Shorthand for `clone`
  cl = clone

  # Create a new commit as a fixup of the specified commit.
  #
  # If no commit hash is given selects the commit
  # that changed at least one of the currently staged files.
  #
  # Usage: g cf [<commit-hash>]
  cf = "!f(){ \
    export COMMIT=${1:-$(git lcs)} && \
    git commit --fixup $COMMIT ; \
  }; f"

  # Create a new commit as a fixup of the specified commit,
  # but with replacing the commit message.
  #
  # If no commit hash is given selects the commit
  # that changed at least one of the currently staged files.
  #
  # Usage: g cfa [<commit-hash>]
  cfa = "!f(){ \
    export COMMIT=${1:-$(git lcs)} && \
    git commit --fixup amend:$COMMIT ; \
  }; f"

  # Same as `cf` but afterwards rebases the commit.
  cfrb = "!f(){ \
    export COMMIT=${1:-$(git lcs)} && \
    git commit --fixup $COMMIT && \
    git -c sequence.editor=: rebase -i $COMMIT~1 ; \
  }; f"

  # Same as `cfa` but afterwards rebases the commit.
  cfarb = "!f(){ \
    export COMMIT=${1:-$(git lcs)} && \
    git commit --fixup amend:$COMMIT && \
    git -c sequence.editor=: rebase -i $COMMIT~1 ; \
  }; f"

  # Remove all untracked, unstaged and staged changes
  cleanse = "!f(){ \
    git reset -q -- ${@:-.} && \
    git checkout -- ${@:-.} && \
    git clean -df ${@:-.} ; \
  }; f"

  # Shorthand for `checkout`
  co = checkout

  # Switch to the default branch
  com = "!f(){ git checkout $(git default-branch) $@;}; f"

  # View a list of files with merge conflicts
  conflicts = !git ls-files -u | cut -f 2 | sort -u

  # Apply the changes from the specified commit to the current branch
  cp = cherry-pick

  # Continue a cherry-pick operation that was previously interrupted
  cpc = cherry-pick --continue

  # View unstaged changes
  d = diff

  # View staged changes
  ds = diff --staged

  # View both unstaged and staged changes
  da = diff HEAD

  # Shorthand for `fetch`
  f = fetch

  # Return the reference of the last commit
  # that changed anything in the given paths.
  #
  # Usage: git lc <paths...>
  lc = "!f(){ cd -- ${GIT_PREFIX:-.}; git log -1 --pretty=format:%h -- $@; }; f"

  # Return the reference of the last commit
  # that changed at least one of the currently staged files.
  #
  # Usage: git lcs
  lcs = !git lc $(git diff --name-only --staged)

  # Create .gitignore if it doesn't exist, and add the specified file to it
  ignore = !([ ! -e .gitignore ] && touch .gitignore) | echo $1 >>.gitignore

  # View the commit history for the repository
  lg = log --color --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset' --abbrev-commit

  # View the name of the default branch of the repository
  default-branch = !git symbolic-ref refs/remotes/origin/HEAD | cut -d'/' -f4

  # Pull changes from the remote repository, without rebasing
  me = pull --rebase=false

  # Pull and then push
  pup = !git up && git pu

  # Pull changes from the default branch of the remote repository, without rebasing
  mem = "!f(){ git pull --rebase=false origin $(git default-branch) $@;}; f"

  # Create an annotated tag, by giving it the same message as the tag name
  #
  # Usage: git atag <name>
  # Example: git atag v1.2.3
  atag = "!f(){ git tag $1 -am $1 ${@:2} ; }; f"

  # Create an annotated tag and push it to the origin remote
  #
  # Usage: git ptag <name>
  ptag = "!f(){ git atag $1 && git push origin refs/tags/$1; }; f"

  # Publish a release, by commiting all tracked changes, creating a tag and pushing it to the remote.
  #
  # Usage: git acptag <name>
  #
  # For example, running `git acptag v1.2.3` will:
  #
  # 1. Stage all tracked files
  # 2. Create a commit with `v1.2.3` message
  # 3. Create an annotated tag with `v1.2.3` name and message
  # 4. Push the current branch with both the commit and the tag
  acptag = "!f(){ git ac $1 && git tag $1 -a -m $1 && git push --follow-tags; }; f"

  # Shorthand for push
  pu = push

  # Shorthand for force push with lease
  pufl = push --force-with-lease

  # Shorthand for `reset`
  r = reset

  # Shorthand for `rebase`
  rb = rebase

  # Continue a rebase operation that has been interrupted by conflicts
  rbc = rebase --continue

  # Perform an interactive rebase onto the default branch of the origin repository
  rbm = "!f(){ git rebase -i origin/$(git default-branch) --no-verify $@;}; f"

  # Set the default remote branch for the origin remote
  remotesh = remote set-head origin --auto

  # Shorthand for `restore`
  rest = restore

  # Shorthand for `revert`
  rv = revert

  # Navigate to the root directory of the git repository
  root = !cd $(git rev-parse --show-toplevel)

  # Mark a file as unchanged, so that git will not track any changes made to it
  skip = update-index --assume-unchanged

  # Shorthand for `stash`
  sh = stash

  # Shorthand for `stash --untracked`
  shu = stash -u

  # Shorthand for `stash apply`
  sha = stash apply

  # Shorthand for `stash pop`
  shp = stash pop

  # Shorthand for `status`
  st = status

  # Use the subtree command from the git contrib directory
  subtree = "!/apps/git/contrib/subtree/git-subtree.sh"

  # Merge a branch from a remote repository into the current repository using the subtree command
  # Arguments: [prefix, remote, branch]
  subtree-merge = "!f(){ git fetch $2 && git subtree merge --prefix=$1 $2/$3; }; f"

  # Push changes in a subtree to a remote repository
  # Arguments: [prefix, remote, branch]
  subtree-push = "!f(){ git subtree split --prefix $1 -b $3 && git push $2 $2:$3; }; f"

  # List all tags in the repository, along with the date and time of the commits they refer to
  tags = !git log --tags --simplify-by-decoration --pretty='format:%ai %d' | sort

  # Search for TODO comments in the repository
  todo = grep --heading --break --ignore-case -e 'TODO'

  # Undo the last commit, but leave its' changes in the working directory
  undo = reset HEAD^

  # Mark a file that was previously marked as unchanged as changed, so that git will track any changes made to it
  unskip = update-index --assume-changed

  # Pull changes from a remote repository and rebase the current branch onto the updated branch
  up = pull

  # Pull changes from the default branch of the origin repository and rebase the current branch onto the updated branch
  upm = "!f(){ git pull origin $(git default-branch) $@;}; f"

  upmi = upm --rebase=interactive

[core]
  # Add a global .gitignore file
  excludesfile = ~/.gitignore_global

[color "status"]
  # In `git status` command,
  # change the color for untracked files from default red to blue
  # (to distinguish them from modified but tracked files)
  untracked = blue

[push]
  # Push the current branch to a branch of the same name
  default = current
  # Avoid having to do `git branch --set-upstream` before `git push`
  autoSetupRemote = true

# Pull with rebase (instead of merge)
[pull]
  rebase = true

[rebase]
  # Use --autosquash option by default
  autosquash = true
  # Use --autostash option by default
  autostash = true

[diff]
  # File rename detection is computationally expensive,
  # so git limits it to 100 files by default.
  # Let's increase it a bit for better UX.
  renamelimit = 1000

[merge]
  # Same as diff.renamelimit
  renamelimit = 1000
  # Use --autostash option by default
  autostash = true

[credential]
  helper = osxkeychain

# Config for hub cli tool
[hub]
  # Use ssh protocol (instead of https)
  protocol = ssh

# Custom git configs per directory
[includeIf "gitdir:~/src/mgm/"]
    path = ~/src/mgm/.gitconfig

# Default git lfs config
# (it was added by the `git lfs install` command)
[filter "lfs"]
  required = true
  clean = git-lfs clean -- %f
  smudge = git-lfs smudge -- %f
  process = git-lfs filter-process
[init]
	defaultBranch = main
[checkout]
	defaultRemote = origin
